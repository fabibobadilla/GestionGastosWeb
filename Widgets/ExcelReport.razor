@inject ExcelReportService ExcelService
@inject IJSRuntime JSRuntime
@inject UsuariosService UsuariosService

<div class="download-excel">
    <button @onclick="DownloadExcel" class="btn btn-secondary">Descargar Reporte</button>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        ListaUsuarios = await UsuariosService.ObtenerUsuarios();
    }

    [Parameter]
    public List<Gasto>? ListaTransacciones { get; set; }

    public List<Usuario>? ListaUsuarios { get; set; }

    [Parameter]
    public List<Categoria>? ListaCategorias { get; set; }

    private async Task DownloadExcel()
    {
        try
        {

            // Generar el archivo Excel
            var excelData = await ExcelService.GenerateExcelReportAsync(ListaTransacciones, ListaUsuarios, ListaCategorias);

            // Descargar el archivo en el navegador
            await JSRuntime.InvokeVoidAsync("downloadFile", "reporte.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al generar el reporte: {ex.Message}");
        }
    }
}
