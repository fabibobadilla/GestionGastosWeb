@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using GestionGastosWeb.Widgets
@using Blazored.LocalStorage
@using Microsoft.JSInterop
@using GestionGastosShared.Services;
@inject NavigationManager Navigation
@inject TokenValidationService TokenValidationService
@* @inject IAuthService AuthService *@

@* @inject IJSRuntime JS *@

@inject ILocalStorageService LocalStorage
@inject GestionGastosShared.Services.TokenService TokenService

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        @if (isLoading)
        {
            <div class="loading-spinner">
                <!-- Aquí tu spinner o pantalla de carga personalizada -->
                <div class="spinner"></div>
            </div>
        }
        else
        {
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        }
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Estamos trabajando en la implementación de esta funcionalidad.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = false;

        // Eliminar el token si existe
        await LocalStorage.RemoveItemAsync("jwt-token");

        // Intentar recuperar el token (debería ser null o vacío si se eliminó correctamente)
        var token = await LocalStorage.GetItemAsync<string>("jwt-token");
        var currentUri = Navigation.Uri;

        if (!string.IsNullOrEmpty(token) && !currentUri.Contains("/dashboard"))
        {
            Navigation.NavigateTo("/dashboard");
        }
        else if (string.IsNullOrEmpty(token) && !currentUri.Contains("/login"))
        {
            Navigation.NavigateTo("/login");
        }

    }



    // protected override async Task OnInitializedAsync()
    // {
    //     isLoading = false;
    //     await LocalStorage.RemoveItemsAsync("jwt-token");

    //     var token = await LocalStorage.GetItemAsync<string>("jwt-token");
    //     var currentUri = Navigation.Uri;

    //     if (!string.IsNullOrEmpty(token) && !currentUri.Contains("/dashboard"))
    //     {
    //         Navigation.NavigateTo("/dashboard");
    //     }
    //     else if (string.IsNullOrEmpty(token) && !currentUri.Contains("/login"))
    //     {
    //         Navigation.NavigateTo("/login");
    //     }

    //     TokenValidationService.StartValidation();

    //     // // Obtener el token desde el almacenamiento local
    //     // var token = await LocalStorage.GetItemAsync<string>("jwt-token");

    //     // // Verificar si el token está próximo a expirar
    //     // if (!string.IsNullOrEmpty(token) && TokenService.IsTokenExpiringSoon(token))
    //     // {
    //     //     token = await TokenService.RenewTokenAsync();
    //     //     await LocalStorage.SetItemAsync("jwt-token", token);
    //     // }

    //     // // Redirigir a la página de inicio si no hay token
    //     // if (string.IsNullOrEmpty(token))
    //     // {
    //     //     Navigation.NavigateTo("/login", forceLoad: true);
    //     // }
    // }
}