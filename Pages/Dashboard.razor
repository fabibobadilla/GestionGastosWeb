@layout MainLayout
@page "/dashboard"

@using GestionGastosWeb.Pages
@inject CategoriasService CategoriasService
@inject GastosService GastosService

<div class="text-center" style="padding: 15px;">
    <h3>Resumen de saldo</h3>
</div>

@if (isLoading)
{
    <div class="loading">
        <GestionGastosWeb.Widgets.Loading></GestionGastosWeb.Widgets.Loading>
    </div>
}
else
{
    <div class="header-dashboard row">
    </div>
    <div class="dashboard">
        <div class="card @(saldo > 0 ? "shadow-green": saldo < 0 ? "shadow-red" : "" )" style="width: 18rem; background-color: white;">
            <div class="card-body">
                <h5 class="card-title">Saldo</h5>
                <h1 class="@GetMontoColor()">$@saldo.ToString("F2")</h1>
                <a href="/transacciones" class="btn btn-primary">Ver transacciones</a>
            </div>
        </div>
    </div>
}

@if (IsCreating)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Añadir Transacción</h5>
                    <button type="button" class="btn-close" @onclick="abrirModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <!-- Campo: Tipo -->
                        <div class="mb-3">
                            <label for="tipo" class="form-label">Tipo</label>
                            <select id="tipo" class="form-control" @bind="nuevoGasto.Tipo">
                                <option value="Ingreso">Ingreso</option>
                                <option value="Gasto">Gasto</option>
                            </select>
                        </div>
                        <!-- Campo: Monto -->
                        <div class="mb-3">
                            <label for="monto" class="form-label">Monto</label>
                            <input type="number" id="monto" class="form-control" @bind="nuevoGasto.Monto" />
                        </div>
                        <!-- Campo: Descripción -->
                        <div class="mb-3">
                            <label for="descripcion" class="form-label">Descripción</label>
                            <input type="text" id="descripcion" class="form-control" @bind="nuevoGasto.Descripcion" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="abrirModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarGasto">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowAlert)
{
    <div class="alert alert-@AlertType alert-dismissible fade show" role="alert">
        @AlertMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@code {
    private bool isLoading = false;
    private bool IsCreating = false;
    private bool ShowAlert;
    private string AlertType = "success";
    private string AlertMessage = "";
    private decimal saldo = 0;

    private Gasto nuevoGasto = new Gasto
        {
            UsuarioId = 4,
            FechaCarga = DateTime.Now
        };

    private List<Gasto>? gastos;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            gastos = await GastosService.ObtenerGastos();

            if (gastos != null)
            {
                saldo = gastos.Sum(g => g.Tipo == "INGRESO" ? Convert.ToDecimal(g.Monto) : -Convert.ToDecimal(g.Monto));
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetMontoColor()
    {
        if (saldo > 0)
            return "text-success"; // Verde
        if (saldo < 0)
            return "text-danger"; // Rojo
        return "text-dark"; // Negro (default)
    }

    public void CargarGasto()
    {
        IsCreating = true;
    }

    public async Task GuardarGasto()
    {
        try
        {
            var response = await GastosService.AgregarGasto(nuevoGasto);

            if (response == "Transacción agregada exitosamente")
            {
                AlertType = "success";
                AlertMessage = "Transacción agregada exitosamente.";
                nuevoGasto = new Gasto { UsuarioId = 4, FechaCarga = DateTime.Now };

                gastos = await GastosService.ObtenerGastos();
                saldo = gastos.Sum(g => g.Tipo == "INGRESO" ? Convert.ToDecimal(g.Monto) : -Convert.ToDecimal(g.Monto));
            }
            else
            {
                AlertType = "danger";
                AlertMessage = $"Error al agregar la transacción: {response}";
            }
        }
        catch (Exception ex)
        {
            AlertType = "danger";
            AlertMessage = $"Ocurrió un error: {ex.Message}";
        }
        finally
        {
            IsCreating = false;
            await MostrarAlerta();
        }
    }

    private async Task MostrarAlerta()
    {
        ShowAlert = true;
        await Task.Delay(2000);
        ShowAlert = false;
    }

    public void abrirModal()
    {
        IsCreating = !IsCreating;
    }
}
